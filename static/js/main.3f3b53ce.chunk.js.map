{"version":3,"sources":["component/markdown_utils/BlockQuoteBlock.js","component/markdown_utils/CodeBlock.js","component/markdown_utils/InlineCodeBlock.js","component/markdown_utils/TableCellBlock.js","component/Main.js","component/company_history/travelai.js","component/company_history/podo.js","serviceWorker.js","index.js"],"names":["BlockQuoteBlock","props","style","border","borderRadius","paddingLeft","margin","children","CodeBlock","background","color","padding","lineHeight","value","InlineCodeBlock","TableCellBlock","textAlign","align","isHeader","borderLeft","borderRight","borderBottom","parseHtml","htmlParser","processingInstructions","shouldProcessNode","node","name","processNode","attribs","findStyleColor","styleStr","target","RegExp","exec","length","colorArr","split","Main","source","skipHtml","escapeHtml","astPlugins","renderers","code","tableCell","inlineCode","blockquote","verticalAlign","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gOAeeA,EAbS,SAACC,GAErB,OACI,yBAAKC,MAAO,CAACC,OAAO,kBACfC,aAAa,GACbC,YAAY,GACZC,OAAO,IAEPL,EAAMM,WCSJC,EAjBG,SAACP,GAEf,OACI,yBAAKC,MAAO,CAACO,WAAW,UACXC,MAAM,UACNC,QAAQ,GACRL,OAAO,GACPF,aAAa,GACbQ,WAAW,MAEpB,8BACKX,EAAMY,SCARC,EAXS,SAACb,GAErB,OACI,0BAAMC,MAAO,CAACO,WAAa,SACtBR,EAAMY,QCmBJE,EAvBQ,SAACd,GAEpB,IAAIC,EAAM,CACNc,UAAWf,EAAMgB,MAAQhB,EAAMgB,MAAQ,SACvCN,QAAU,GAYd,OATIV,EAAMiB,UACNhB,EAAMO,WAAa,OACnBP,EAAMC,OAAS,iBACfD,EAAMiB,WAAa,EACnBjB,EAAMkB,YAAc,GAEpBlB,EAAMmB,aAAe,iBAIrB,wBAAInB,MAAOA,GACND,EAAMM,WCwCbe,GA9CM,s7BAHF,eAAN,OA2C6C,eA3C7C,kBAGQ,2BA8CMC,IAAW,CACzBC,uBAAyB,CAAC,CACtBC,kBAAoB,SAACC,GAAD,OAAUA,GAAqB,WAAbA,EAAKC,MAC3CC,YAAc,SAACF,GACX,IAAIxB,EAAQ,GAIZ,MAHmB,SAAdwB,EAAKC,MAAmBD,EAAKG,SAAWH,EAAKG,QAAQ3B,QACtDA,EAAMQ,MAAQoB,EAAeJ,EAAKG,QAAQ3B,MAAO,UAE9C,kBAACwB,EAAKC,KAAN,CAAWzB,MAAOA,UAK/B4B,EAAiB,SAACC,EAAUC,GAC9B,IAAMtB,EAAQ,IAAIuB,OAAJ,UAAcD,EAAd,2BAA8CE,KAAKH,GAGjE,GAAGrB,GAASA,EAAMyB,OAAS,EAAE,CACzB,IAAMC,EAAW1B,EAAM,GAAG2B,MAAM,KAChC,GAAGD,EAASD,OAAS,EACjB,OAAOC,EAAS,GAIxB,OAAO,MA+BIE,EA5BF,WAET,OACI,yBAAKpC,MAAO,CAACI,OAAO,KAChB,6BACI,kDACA,2BAAG,4BAAI,qEACP,+BACI,4BACI,4BACI,gEACA,4DAEJ,4BAAI,kBAAC,IAAD,CAAeiC,OCpG/B,+IDoGwDC,UAAU,EAAOC,YAAY,EAAOC,WAAY,CAACpB,GAAYqB,UAAW,CAAEC,KAAOpC,EAAWqC,UAAY9B,EAAgB+B,WAAahC,EAAiBiC,WAAa/C,OAEnN,wBAAIE,MAAO,CAAC8C,cAAc,QACtB,4BACI,4EACA,gEAEJ,4BAAI,kBAAC,IAAD,CAAeT,OE3G/B,6xBF2GoDC,UAAU,EAAOC,YAAY,EAAOC,WAAY,CAACpB,GAAYqB,UAAW,CAAEC,KAAOpC,EAAWqC,UAAY9B,EAAgB+B,WAAahC,EAAiBiC,WAAa/C,WG/F/MiD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.3f3b53ce.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst BlockQuoteBlock = (props) => {\r\n\r\n    return (\r\n        <div style={{border:'1px dashed #aaa', \r\n             borderRadius:10, \r\n             paddingLeft:10, \r\n             margin:5\r\n             }}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BlockQuoteBlock;","import React from 'react';\r\n\r\nconst CodeBlock = (props) => {\r\n\r\n    return (\r\n        <pre style={{background:'#483D8B', \r\n                     color:'#FFFFFF', \r\n                     padding:10, \r\n                     margin:10, \r\n                     borderRadius:10,\r\n                     lineHeight:1.5\r\n                     }}>\r\n            <code>\r\n                {props.value}\r\n            </code>\r\n        </pre>\r\n    )\r\n}\r\n\r\nexport default CodeBlock;","import React from 'react';\r\n\r\nconst InlineCodeBlock = (props) => {\r\n\r\n    return (\r\n        <span style={{background : '#ff0'}}>\r\n            {props.value}\r\n        </span>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default InlineCodeBlock;","import React from 'react';\r\n\r\nconst TableCellBlock = (props) => {\r\n\r\n    let style={\r\n        textAlign: props.align ? props.align : 'center',\r\n        padding : 5\r\n    };\r\n\r\n    if (props.isHeader) {\r\n        style.background = '#ff0';\r\n        style.border = '1px solid #ccc';\r\n        style.borderLeft = 0;\r\n        style.borderRight = 0;\r\n    } else {\r\n        style.borderBottom = '1px solid #eee';\r\n    }\r\n\r\n    return (\r\n        <td style={style}>\r\n            {props.children}\r\n        </td>\r\n    )\r\n}\r\n\r\nexport default TableCellBlock;","import React  from 'react';\r\nimport ReactMarkDown from 'react-markdown';\r\nimport htmlParser from 'react-markdown/plugins/html-parser';\r\nimport BlockQuoteBlock from './markdown_utils/BlockQuoteBlock';\r\nimport CodeBlock from './markdown_utils/CodeBlock';\r\nimport podoSource from './company_history/podo';\r\nimport travelaiSource from './company_history/travelai';\r\nimport InlineCodeBlock from './markdown_utils/InlineCodeBlock';\r\nimport TableCellBlock from './markdown_utils/TableCellBlock';\r\n\r\nexport const highlight = (string) => {\r\n    return `<em><strong>${string}</strong></em>`\r\n}\r\n\r\nconst source = `\r\n# REACT MARKDOWN RENDERING SUCCESS\r\n\r\n## asdfasfd\r\n### asdfsad\r\n1. asdfasdf\r\n    * asdfasdf\r\n    * asdfasf   \r\n\r\n2. asdfasdfasdf\r\n    * asfdasfd\r\n    * asfdasfd\r\n\\`\\`\\`\r\npackage data_structure;\r\n\r\nimport java.util.Arrays;\r\n\r\nclass Solution {\r\n    public String solution(String[] participant, String[] completion) {\r\n        \r\n        Arrays.sort(participant);\r\n        Arrays.sort(completion);\r\n        \r\n        for (String part : participant) System.out.print(part + \" \");\r\n        System.out.println(\"\");\r\n        for (String comp : completion)\tSystem.out.print(comp + \" \");\r\n        \r\n        for(int i = 0; i < completion.length; i++) {\r\n            if(!participant[i].equals(completion[i])) {\r\n                return participant[i];\r\n            }\r\n        }\r\n        return participant[participant.length-1];\r\n    }\r\n}\r\n\\`\\`\\`\r\n\r\n> 인용문\r\n글자 \\`강조\\` 하기;\r\n\r\nasdfasfdasf <span style='color:red;'>${highlight('asdfasdfasfd')}</span> asdfasfasdf\r\n\r\n`\r\n\r\n\r\n\r\nconst parseHtml = htmlParser({\r\n    processingInstructions : [{\r\n        shouldProcessNode : (node) => node && node.name !=='script',\r\n        processNode : (node) => {\r\n            let style = {}; \r\n            if ( node.name === 'span' && node.attribs && node.attribs.style ){\r\n                style.color = findStyleColor(node.attribs.style, 'color');\r\n            }\r\n            return <node.name style={style} />;\r\n        } \r\n    }]\r\n})\r\n\r\nconst findStyleColor = (styleStr, target) => {\r\n    const color = new RegExp(`${target}\\\\s*:\\\\s*[#a-zA-Z0-9]+`).exec(styleStr);\r\n    // html style의 : 이후 target 태그의 컬러 값을 검색한다.\r\n\r\n    if(color && color.length > 0){\r\n        const colorArr = color[0].split(':');\r\n        if(colorArr.length > 1){\r\n            return colorArr[1];\r\n        }\r\n    }\r\n\r\n    return null;\r\n\r\n}\r\nconst Main = () => {\r\n\r\n    return (\r\n        <div style={{margin:10}}>\r\n            <div>\r\n                <h1>이동걸</h1>\r\n                <p><em><strong>자바 개발자</strong></em></p>\r\n                <table>\r\n                    <tr>\r\n                        <td> \r\n                            <span>트래블라이</span>\r\n                            <p>2020.10 ~ 재직중</p>\r\n                        </td>\r\n                        <td><ReactMarkDown source={travelaiSource}  skipHtml={false} escapeHtml={false} astPlugins={[parseHtml]} renderers={{ code : CodeBlock, tableCell : TableCellBlock, inlineCode : InlineCodeBlock, blockquote : BlockQuoteBlock }}/></td>\r\n                    </tr>\r\n                    <tr style={{verticalAlign:\"top\"}}>\r\n                        <td> \r\n                            <span>포도소프트웨어</span>\r\n                            <p>2019.10 ~ 2020.06(9개월)</p>\r\n                        </td>\r\n                        <td><ReactMarkDown source={podoSource}  skipHtml={false} escapeHtml={false} astPlugins={[parseHtml]} renderers={{ code : CodeBlock, tableCell : TableCellBlock, inlineCode : InlineCodeBlock, blockquote : BlockQuoteBlock }}/></td>\r\n                    </tr>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","const source = `\r\n\r\n* 자유여행자 플랫폼 ALU 개발 및 운영\r\n\r\n\\`\\`\\`\r\n2020.04~2020.06(3개월)\r\n\\`\\`\\`\r\n\r\n`;\r\n\r\nexport default source;","const source = `\r\n\r\n* 공공기관 및 대학 프로젝트 유지보수\r\n\\`\\`\\`2020.04~2020.06(3개월)\\`\\`\\`\r\n\r\n* 대학 학생역량개발 및 상담관리 시스템 구축\r\n\\`\\`\\`2020.01~2020.03(3개월)\\`\\`\\`\r\n\r\n* 오프라인 세미나 및 온라인 교육 관리 시스템 구축\r\n\\`\\`\\`2019.10~2020.01 (3개월)\\`\\`\\`\r\n\r\n<span style=\"color:red;\"><em><strong>※ Technical Set</strong></em></span>\r\n\\`\\`\\`\r\n- Backend : Java, groovy, Structs, Spring framework, Mysql, Oracle\r\n- Frontend : HTML5, JS, JQeury, KendoUI\r\n- 형상관리 및 협업 : Subversion\r\n- 운영환경 : Linux, apache, tomcat, JBoss\r\n\\`\\`\\`\r\n\r\n\r\n`;\r\n\r\nexport default source;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Main from './component/Main';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}